//=============================================================================
//
// エネミー処理 [enemy.cpp]
// Author : GP12A295 25 人見友基
//
//=============================================================================
#include "main.h"
#include "enemy.h"

// デバッグ用
#ifdef _DEBUG
#include "debugproc.h"
#endif

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

//*****************************************************************************
// グローバル変数
//*****************************************************************************

//=============================================================================
// コンストラクタ（初期化処理）
//=============================================================================
Enemy::Enemy(void)
{

}

//=============================================================================
// デストラクタ（終了処理）
//=============================================================================
Enemy::~Enemy(void)
{

}

//=============================================================================
// 更新処理
//=============================================================================
void Enemy::Update(void)
{

}

//=============================================================================
// 更新処理
//=============================================================================
void Enemy::Draw(void)
{

}



//=============================================================================
// コンストラクタ（初期化処理）
//=============================================================================
EnemyManager::EnemyManager(void)
{

}

//=============================================================================
// デストラクタ（終了処理）
//=============================================================================
EnemyManager::~EnemyManager(void)
{

}